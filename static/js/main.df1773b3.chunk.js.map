{"version":3,"sources":["panels/Home.js","utils.js","App.js","index.js"],"names":["Home","id","fetchedUser","go","vkTopic","title","before","photo_200","src","description","city","first_name","last_name","href","target","getTopic","userId","a","url","requestOptions","method","fetch","then","response","json","data","catch","error","console","log","App","useState","activePanel","setActivePanel","setUser","size","popout","setPopout","setVkTopic","useEffect","bridge","send","user","strVkTopic","subscribe","detail","type","schemeAttribute","document","createAttribute","value","scheme","body","attributes","setNamedItem","fetchData","e","currentTarget","dataset","to","ReactDOM","render","getElementById"],"mappings":"6rBAsDeA,EA5CF,SAAC,GAAD,IAAEC,EAAF,EAAEA,GAAQC,GAAV,EAAMC,GAAN,EAAUD,aAAaE,EAAvB,EAAuBA,QAAvB,OACT,kBAAC,IAAD,CAAOH,GAAIA,GACP,kBAAC,IAAD,gCACCC,GACD,kBAAC,IAAD,CAAOG,MAAM,oCACT,kBAAC,IAAD,CACIC,OAAQJ,EAAYK,UAAY,kBAAC,IAAD,CAAQC,IAAKN,EAAYK,YAAe,KACxEE,YAAaP,EAAYQ,MAAQR,EAAYQ,KAAKL,MAAQH,EAAYQ,KAAKL,MAAQ,IAFvF,UAIQH,EAAYS,WAJpB,YAIkCT,EAAYU,WACzCR,GAEL,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KAEQF,GACAE,GACA,kBAAC,IAAD,CAAMS,KAAI,UAAKT,EAAL,gBAA4BU,OAAO,UACxCV,SCNlBW,EAtBD,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAIPC,EAJO,kEAI0DF,GAEjEG,EAAiB,CACnBC,OAAQ,OAPC,SAUPC,MAAMH,EAAKC,GACZG,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACHrB,EAAUqB,EAAK,GAAL,YAEbC,OAAM,SAACC,GACJC,QAAQC,IAAIF,MAhBP,gCAmBNvB,GAnBM,2CAAH,sDCiDC0B,EAxCH,WAAO,IAAD,EACwBC,mBAAS,QADjC,mBACPC,EADO,KACMC,EADN,OAEiBF,mBAAS,MAF1B,mBAEP7B,EAFO,KAEMgC,EAFN,OAGcH,mBAAS,kBAAC,IAAD,CAAeI,KAAK,WAH3C,mBAGPC,EAHO,KAGCC,EAHD,OAKgBN,mBAAS,MALzB,mBAKP3B,EALO,KAKEkC,EALF,KAOdC,qBAAU,WAAM,4CASZ,8BAAAtB,EAAA,sEACuBuB,IAAOC,KAAK,uBADnC,cACUC,EADV,OAEIR,EAAQQ,GACRL,EAAU,MAHd,SAK6BtB,EAAS2B,EAAKzC,IAL3C,OAKU0C,EALV,OAMIL,EAAWK,GANf,4CATY,sBACZH,IAAOI,WAAU,YAA6B,IAAD,IAA1BC,OAASC,EAAiB,EAAjBA,KAAMrB,EAAW,EAAXA,KAC9B,GAAa,yBAATqB,EAAiC,CACjC,IAAMC,EAAkBC,SAASC,gBAAgB,UACjDF,EAAgBG,MAAQzB,EAAK0B,OAAS1B,EAAK0B,OAAS,eACpDH,SAASI,KAAKC,WAAWC,aAAaP,OALlC,mCAmBZQ,KACD,IAMH,OACI,kBAAC,IAAD,CAAMvB,YAAaA,EAAaI,OAAQA,GACpC,kBAAC,EAAD,CAAMnC,GAAG,OAAOC,YAAaA,EAAaC,GANvC,SAAAqD,GACPvB,EAAeuB,EAAEC,cAAcC,QAAQC,KAKevD,QAASA,MCrCvEoC,IAAOC,KAAK,gBAEZmB,IAASC,OAAO,kBAAC,EAAD,MAAQb,SAASc,eAAe,W","file":"static/js/main.df1773b3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\nimport Link from \"@vkontakte/vkui/dist/components/Link/Link\";\nimport Div from \"@vkontakte/vkui/dist/components/Div/Div\";\n\nconst Home = ({id, go, fetchedUser, vkTopic}) => (\n    <Panel id={id}>\n        <PanelHeader>Physical transformation</PanelHeader>\n        {fetchedUser &&\n        <Group title=\"User Data Fetched with VK Bridge\">\n            <Cell\n                before={fetchedUser.photo_200 ? <Avatar src={fetchedUser.photo_200}/> : null}\n                description={fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : ''}\n            >\n                {`${fetchedUser.first_name} ${fetchedUser.last_name}`}\n                {vkTopic}\n            </Cell>\n            <Cell>\n                <Div>\n                    <Div>\n                        {\n                            fetchedUser &&\n                            vkTopic &&\n                            <Link href={`${vkTopic}?offset=last`} target=\"_blank\">\n                                {vkTopic}\n                            </Link>\n\n                        }\n                    </Div>\n                </Div>\n            </Cell>\n        </Group>}\n\n    </Panel>\n);\n\nHome.propTypes = {\n    id: PropTypes.string.isRequired,\n    go: PropTypes.func.isRequired,\n    fetchedUser: PropTypes.shape({\n        photo_200: PropTypes.string,\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        city: PropTypes.shape({\n            title: PropTypes.string,\n        }),\n    }),\n};\n\nexport default Home;\n","\nconst getTopic = async (userId) => {\n\n    let vkTopic;\n\n    const url = `https://v257275.hosted-by-vdsina.ru/api/client/vk?vk_id=${userId}`;\n\n    const requestOptions = {\n        method: 'GET'\n    };\n\n    await fetch(url, requestOptions)\n        .then((response) => response.json())\n        .then((data) => {\n            vkTopic = data[0]['vk_topic'];\n        })\n        .catch((error) => {\n            console.log(error)\n        });\n    \n    return vkTopic;\n}\n\nexport default getTopic;","import React, {useEffect, useState} from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\nimport getTopic from \"./utils\";\n\n\nconst App = () => {\n    const [activePanel, setActivePanel] = useState('home');\n    const [fetchedUser, setUser] = useState(null);\n    const [popout, setPopout] = useState(<ScreenSpinner size='large'/>);\n\n    const [vkTopic, setVkTopic] = useState(null);\n\n    useEffect(() => {\n        bridge.subscribe(({detail: {type, data}}) => {\n            if (type === 'VKWebAppUpdateConfig') {\n                const schemeAttribute = document.createAttribute('scheme');\n                schemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n                document.body.attributes.setNamedItem(schemeAttribute);\n            }\n        });\n\n        async function fetchData() {\n            const user = await bridge.send('VKWebAppGetUserInfo');\n            setUser(user);\n            setPopout(null);\n\n            const strVkTopic = await getTopic(user.id);\n            setVkTopic(strVkTopic);\n\n        }\n\n        fetchData();\n    }, []);\n\n    const go = e => {\n        setActivePanel(e.currentTarget.dataset.to);\n    };\n\n    return (\n        <View activePanel={activePanel} popout={popout}>\n            <Home id='home' fetchedUser={fetchedUser} go={go} vkTopic={vkTopic}/>\n        </View>\n    );\n}\n\nexport default App;\n","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n    import(\"./eruda\").then(({default: eruda}) => {\n    }); //runtime download\n}\n"],"sourceRoot":""}